'''Обход графа в ширину'''

def width(graph, start):
    neighbour = [] #соседние вершины
    count_node = len(graph) #количество вершин
    #для каждой вершины графа записываем номера соседних вершин
    for k in range(count_node):
        neighbour.append([])
        for l in range(count_node):
            if graph[k][l] != 0:
                neighbour[k].append(l)

    res_list = [] #итоговый список вершин при обходе в ширину 
    queue = [] #очередь обхода
    queue.append(start) #добавляем в очередь начальную вершину
    while queue != []: #пока в очереди есть веришины
        next_node = queue.pop(0) #извлекается первая вершина в очереди
        res_list.append(next_node) #добавляется в итоговый список
        for n in neighbour[next_node]: #проходимо по всем соседним вершинам
            if n not in queue and n not in res_list: #если веришна не в очереди и еще не добавлена в итоговый список
                queue.append(n) #вершина добавляется в очередь
    return res_list

graph = [
    [0,1,0,0,1,0,0,0,1,0,0,0],
    [1,0,0,0,0,0,0,1,0,0,1,0],
    [0,0,0,1,0,0,1,0,0,1,0,1],
    [0,0,1,0,0,1,0,1,0,1,0,0],
    [1,0,0,0,0,0,1,0,0,0,0,0],
    [0,0,0,1,0,0,0,0,0,0,1,0],
    [0,0,1,0,1,0,0,1,0,0,0,0],
    [0,1,0,1,0,0,1,0,1,0,0,0],
    [1,0,0,0,0,0,0,1,0,0,0,1],
    [0,0,1,1,0,0,0,0,0,0,0,0],
    [0,1,0,0,0,1,0,0,0,0,0,0],
    [0,0,1,0,0,0,0,0,1,0,0,0]
]

start = 5

w = width(graph, start)
print(f'Путь обхода графа в ширину, начиная с {start}-й вершины: {w}')